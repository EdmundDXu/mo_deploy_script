#!/bin/bash
#

WARN="\033[37;33m"
TITLE="\033[37;36m"
TEXT="\033[32;38m"
END="\033[0m"

function printWarn(){
    echo -e "${WARN}${1}${END}"
}

function readYN(){
    echo -en "${WARN}${1}${END}"
    read CHOICE
    CHOICE=${CHOICE:="y"}
    if [ ${CHOICE} != "y" ] && [ ${CHOICE} != "Y" ]; then
        exit 3
    fi
}

function println(){
    echo
}

function printText(){
    echo -e "${TEXT}--------------------------------------------${END}"
    echo -e "${TEXT}${1}${END}"
    echo -e "${TEXT}--------------------------------------------${END}\n"
}

function printList(){
    echo -e "${TEXT}${1}${END}"
}

function printTitle(){
    echo -e "${TITLE}===============${1}===============${END}\n"
}



function init(){
    # default configuration
    DEFAULT_CONFIG_FILE="deploy.conf"
    SCRIPT_DIR="`pwd`"

    # import user's configuration to overwrite default configuration
    while getopts "c:" arg # 读取命令行选项和参数
    do
        case $arg in
            c)
                CONFIG_FILE=${OPTARG};; #参数存在$OPTARG中
            *)
                echo "Usage: ./`basename ${0}` [-c CONFIG_FILE]"
            esac
    done

    # 如果没有指定-f选项，则读取默认的配置文件
    CONFIG_FILE=${CONFIG_FILE:=${DEFAULT_CONFIG_FILE}}
    if [ -f ${CONFIG_FILE} ]; then
        . ${CONFIG_FILE}
    else
        echo "Please provide a configuration file"
        exit -2
    fi
}

function main_list(){
    echo -e "${TEXT}--------------------------------------------${END}"
    printList " 0. Execute all scripts"
    printList " 1. pull mo"
    printList " 2. pull submodules"
    printList " 3. modify configuration file"
    printList " 4. pull docker image"
    printList " 5. install python packages"
    printList " 6. compile jupyterlab packages"
    printList " 7. install and build web packages"
    printList " 8. install and build sub-webpage packages"
    printList " 9. restart apps"
    printList " 10. refresh version number"
    printList " 11. exit"
    printWarn "Please choice some number to execute separated by spaces Or use continuous intervals separated by dash like(1-3)"
    echo -e "${TEXT}--------------------------------------------${END}\n"
    
    FUNC_LIST=("" "pull_mo" "pull_submodules" "modify_config_files" "pull_docker_image" "install_python_packages" "compile_jupyterlab_packages" "install_and_build_web_packages" "install_and_build_subwebpage_packages" "restart_apps" "refresh_version_number" )

    declare -i LIST_SIZE=${#FUNC_LIST[@]}-1
    read CHOICE
    if echo ${CHOICE} | egrep "^[[:digit:]]+$" &> /dev/null && [ ${CHOICE} -eq 0 ]; then
        for func in ${FUNC_LIST[@]}; do
            ${func}
        done
    elif echo ${CHOICE} | egrep "^[[:digit:]]+$" &> /dev/null && [ ${CHOICE} -eq $[LIST_SIZE+1] ]; then
        exit 0
    elif echo ${CHOICE} | grep "[[:digit:]]-[[:digit:]]" &> /dev/null; then  # check first-second
        FIRST=`echo ${CHOICE} | cut -d'-' -f1`
        SECOND=`echo ${CHOICE} | cut -d'-' -f2`
        if [ ! -z ${FIRST} ] && [ ! -z ${SECOND} ] && [ ${FIRST} -le ${SECOND} ]; then
            if [ ${FIRST} -ge 1 ] && [ ${FIRST} -le ${LIST_SIZE} ] && [ ${SECOND} -ge 1 ] && [ ${SECOND} -le ${LIST_SIZE} ] ; then
                for ((FUNCS=${FIRST};FUNCS<=${SECOND};FUNCS++));do
                    ${FUNC_LIST[${FUNCS}]}
                done
            else
                printWarn "Given value out of bounds!"
		exit 6
            fi
        else
            printWarn "Wrong input value!"
            exit 5
        fi
    elif echo ${CHOICE} | egrep "^[[:digit:]][[:space:]]*"; then  # check 1 2 3
        for num in ${CHOICE}; do
            if [ ${num} -ge 1 ] && [ ${num} -le ${LIST_SIZE} ] ; then
                ${FUNC_LIST[${num}]}
            fi
        done
    else
        printWarn "Please choice some number to execute separated by spaces Or use continuous intervals separated by dash like(1-3)"
        exit 1
    fi

}

function pull_mo(){
    printTitle "pull mo..."
    cd ${MO_HOME}
    git checkout ${GIT_BRANCH}
    if ! git pull; then
        printWarn "git pull seems to have problems, please fix it manually..."
        exit 4
    fi
}

function modify_config_files(){
    # modify constants.py
    printTitle "modify constants.py"
    # 将其他没被注释的ENV注释起来
    sed -i "s/^[[:space:]]*\(ENV = '.*'\)/# \1/i" ${CONSTANTSPY}

    # 将# ENV = '${ENV}'的注释去掉
    sed -i "s/#[[:space:]]*\(ENV = '${ENV}'\)/\1/i" ${CONSTANTSPY}

    # 如果没有抓取到ENV = '${ENV}'
    if ! grep "ENV = '${ENV}'" ${CONSTANTSPY} &>> /dev/null; then
            # 就报错并退出程序
            echo "can't find ENV = '${ENV}' in ${CONSTANTSPY}"
            exit 2
    fi

    printTitle "modify result"
    printText "`cat ${CONSTANTSPY} | grep -C 5 '^ENV.*'`"


    # modify config.js
    printTitle "modify config.js"
    # 将其他没被注释的conf.*注释起来
    sed -i "s@^[[:space:]]*\(conf\..*\)@  // \1@i" ${CONFIGJS}

    # 将// conf.${ENV}的注释去掉
    sed -i "s@[[:space:]]*//[[:space:]]*\(conf\.${ENV}.*\)@  \1@i" ${CONFIGJS}

    # 如果没有抓取到conf.${ENV}
    if ! grep "conf\.${ENV}" ${CONFIGJS} &>> /dev/null; then
            # 就报错并退出程序
            echo "can't find conf.${ENV} in ${CONFIGJS}"
            exit 2
    fi

    printTitle "modify result"
    printText "`cat ${CONFIGJS} | grep -A 10 '^module\.exports'`"


    # modify __init__.py
    printTitle "modify __init__.py"
    # 将其他没被注释的ENV注释起来
    sed -i "s/^[[:space:]]*\(ENV = '.*'\)/# \1/i" ${INITPY}

    # 将# ENV = '${OS}'的注释去掉
    sed -i "s/#[[:space:]]*\(ENV = '${OS}'\)/\1/i" ${INITPY}

    # 如果没有抓取到ENV = '${OS}'
    if ! grep "ENV = '${OS}'" ${INITPY} &>> /dev/null; then
            # 就报错并退出程序
            echo "can't find ENV = '${OS}' in ${INITPY}"
            exit 2
    fi

    printTitle "modify result"
    printText "`cat ${INITPY} | grep -C 5 '^ENV.*'`"


    # modify jupyterhub_config.py
    printTitle "modify jupyterhub_config.py"
    # 将其他没被注释的c.KubeSpawner.image_spec注释起来
    #sed -i "s@^[[:space:]]*\(c\.KubeSpawner\.image_spec[[:space:]]*=[[:space:]]*'.*'\)@# \1@i" ${JUPYTERHUBCONFIGPY}

    # 将# c.KubeSpawner.image_spec = '${DOCKER_IMAGE}'的注释去掉
    #sed -i "s@#[[:space:]]*\(c\.KubeSpawner\.image_spec[[:space:]]*=[[:space:]]*'${DOCKER_IMAGE}'\)@\1@i" ${JUPYTERHUBCONFIGPY}

    # 如果没有抓取到c.KubeSpawner.image_spec = '${DOCKER_IMAGE}'
    #if ! grep "c.KubeSpawner.image_spec[[:space:]]*=[[:space:]]*'${DOCKER_IMAGE}'" ${JUPYTERHUBCONFIGPY} &>> /dev/null; then
            # 就报错并退出程序
     #       echo "can't find c.KubeSpawner.image_spec = '${DOCKER_IMAGE}' in ${JUPYTERHUBCONFIGPY}"
      #      exit 2
    #fi

	# 将其他没被注释的ENV注释起来
	sed -i "s/^[[:space:]]*\(ENV = '.*'\)/# \1/i" ${JUPYTERHUBCONFIGPY}

    # 将# ENV = '${ENV}'的注释去掉
    sed -i "s/#[[:space:]]*\(ENV = '${ENV}'\)/\1/i" ${JUPYTERHUBCONFIGPY}

    # 如果没有抓取到ENV = '${ENV}'
    if ! grep "ENV = '${ENV}'" ${JUPYTERHUBCONFIGPY} &>> /dev/null; then
            # 就报错并退出程序
            echo "can't find ENV = '${ENV}' in ${JUPYTERHUBCONFIGPY}"
            exit 2
    fi

    printTitle "modify result"
    printText "`cat ${JUPYTERHUBCONFIGPY} | grep -C 5 ${ENV}`"
}

function pull_submodules(){
    printTitle "start pull jupyterhub..."
    cd ${MO_HOME}/pyserver/jupyterhub
    git pull
    printTitle "pull jupyterhub complete..."

    printTitle "start pull jupyterlab-monaco..."
    cd ${MO_HOME}/frontend/src/packages/jupyterlab_package/packages/jupyterlab-monaco
    git pull
    printTitle "pull jupyterlab-monaco complete..."

    printTitle "start pull klaus"
    cd ${KLAUS_HOME}
    git pull
    printTitle "pull klaus complete"
}

function pull_docker_image(){
    printTitle "start pull docker images..." 
    docker pull ${DOCKER_IMAGE}
	docker pull ${DOCKER_JOB_IMAGE}
	docker pull ${DOCKER_JOB_GPU_IMAGE}
	docker pull ${DOCKER_FAAS_PYTHON3_IMAGE}
	docker pull ${DOCKER_CELERY_APP_IMAGE}
    printTitle "pull complete..."
}

function install_python_packages(){
    printTitle "start install python packages..."
    # venvwrapper
    export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.6
    export WORKON_HOME=${HOME}/.virtualenvs
    source /usr/bin/virtualenvwrapper.sh
    workon moenv
    if ! pip install -r ${REQUIREMENTSTXT} 2> ${PIPERRORLOG} > /dev/null; then
	cat ${PIPERRORLOG}
    fi
    deactivate
    printTitle "install complete..."
}

function compile_jupyterlab_packages(){
    printTitle "start compile jupyterlab packages..."
    cd ${MO_HOME}/frontend/src/packages/jupyterlab_package/packages/
    for d in ./*/ ; do 
	cd "$d"
	tsc &>> /home/admin/script/tsc.error &
	echo "$(basename $(pwd))"
	cd -
    done
    while true; do
	TSC_TASK=`ps aux | grep tsc | wc -l`
	if [ ${TSC_TASK} -le 1 ]; then
	    break
	else
	    printTitle "Remain tsc tasks: $[${TSC_TASK}-1]"
	fi
	sleep 5
    done	
    printTitle "compile jupyterlab packages complete..."
}

function install_and_build_web_packages(){
    printTitle "start install and build web packages..."
    cd ${MO_HOME}/frontend/
    npm install
    rm -rf /home/admin/www/mo_prod/frontend/node_modules/@types/bluebird
    if ! npm run build; then
        printWarn "Failed to compile."
        if ! readYN "Whether to continue?(Y/n) "; then
            exit 3
        fi
    fi
    printTitle "install and build web packages complete..."
}

function install_and_build_subwebpage_packages(){
    install_and_build_moduleList_packages
}

function install_and_build_moduleList_packages(){
    printTitle "start install and build moduleList packages..."
    cd ${MO_HOME}/frontend/moduleList
    npm install
    if ! npm run build; then
        printWarn "Failed to compile."
        if ! readYN "Whether to continue?(Y/n) "; then
            exit 3
        fi
    fi
    printTitle "install and build moduleList packages complete..."
}

function restart_apps(){
    printWarn "stopping jupyterhub..." 
    if sudo supervisorctl stop jupyterhub && sudo pkill node; then
        printWarn "Successfully stopped jupyterhub..."
    else
        printWarn "Failed to stop jupyterhub..."
    fi
    println
     
    printWarn "stopping socketio..."
    if sudo supervisorctl stop run_socketio && sudo fuser -k 5006/tcp; then
        printWarn "Successfully stopped socketio..."
    else
        printWarn "Failed to stop socketio..."
    fi
    println
    #printWarn "stopping jupyter container..."
    #if docker stop $(docker ps -a -q --filter="name=jupyter") &>> /dev/null; then
    #    printWarn "Successfully stopped container..."
    #else
    #    printWarn "Failed to stop container..."
    #fi
    #println

    printWarn "start jupyterhub..."
    printWarn "start socketio..."
    sudo supervisorctl start jupyterhub && printWarn "Successfully start jupyterhub..." || printWarn "Failed to start jupyterhub..."
    sudo supervisorctl start run_socketio && printWarn "Successfully start run_socketio..." || printWarn "Failed to start run_socketio..."
    sudo supervisorctl restart klaus && printWarn "Successfully start klaus..." || printWarn "Failed to start klaus..."
    sudo supervisorctl restart elasticsearch && printWarn "Successfully start elasticsearch..." || printWarn "Failed to start elasticsearch..."
    println
}


function refresh_version_number(){
    printList "refresh version number..." 
    branch_name="$(cd ${MO_HOME};git symbolic-ref HEAD 2>/dev/null)" || branch_name="(unnamed branch)"     # detached HEAD
    branch_name=${branch_name##refs/heads/}
    echo ${branch_name}
    echo ${branch_name} | sed 's/release-/Beta v/' | cut -d '.' -f 1,2
    version_number=`echo ${branch_name} | sed 's/release-/Beta v/' | cut -d '.' -f 1,2`
    echo ${CONSTANTSJS}
    if grep "betaVersion" ${CONSTANTSJS} &> /dev/null ; then
        if ! grep "^[[:space:]]*betaVersion[[:space:]]*:[[:space:]]*'${version_number}'.*" ${CONSTANTSJS} &> /dev/null; then
	    printWarn "start refresh version number"
            sed -i "s@\([[:space:]]*betaVersion[[:space:]]*:[[:space:]]*'\).*\('.*\)@\1${version_number}\2@i" ${CONSTANTSJS}
        fi
    else
        printWarn "something wrong with betaVersion in CONSTANTSJS"
        exit 7
    fi
    printText "`cat ${CONSTANTSJS} | grep 'betaVersion'`"
   
    printList "refresh version number to ${version_number} complete" 
}
